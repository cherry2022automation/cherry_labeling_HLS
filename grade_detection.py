from matplotlib import pyplot as plt
from numpy import histogram
import pickle
import cherry
import numpy as np

hist_data_pass = "C:\\Users\\cherr\\Desktop\\data\\Program\\cherry_labeling_HLS\\HLS_hist_data.pkl"
output_dir = "C:\\Users\\cherr\\Desktop\\data\\histogram\\satonishiki_all\\"
grade_value_csv_pass = "C:\\Users\\cherr\\Desktop\\data\\Program\\cherry_labeling_HLS\\grade_values.csv"

grade_color = {"特秀":"b", "秀":"g", "マル秀":"r", "ハネ出し":"c", "捨て":"m"}

# hls_data = [239,251,244,327,673,684] # 特秀Lまとめ
# hls_data = [1,251,307,569,673,1420,1427] # 特秀Hまとめ
# hls_data = [576,620,1137,1384,1397] # 特秀Sまとめ

# hls_data = [303,341,350,576,620,653,1137,] # 特秀まとめ　　？

# hls_data = [182,489,845,881,993,1014] # 秀Lまとめ
# hls_data = [6,65,444,1005,1015,1232] # 秀Hまとめ
# hls_data = [57,158,734,987,1248] # 秀Sまとめ

# hls_data = [14,189,210,217,539,925,1042] # マル秀Hまとめ
# hls_data = [14,185,201,525,1044,1274] # マル秀Lまとめ
# hls_data = [13,14,191,538,924,937,1045] # マル秀Sまとめ

# グラフ評価用
# typical_tokushu = [239,251,244]
# typical_shu = [182,489,845]
# typical_marushu = [14,189,210]

# 代表的な値
# typical_tokushu = [239,251,244,327,673,684,1,251,307,569,673,1420,1427,576,620,1137,1384,1397]
# typical_shu = [182,489,845,881,993,1014,6,65,444,1005,1015,1232,57,158,734,987,1248]
# typical_marushu = [14,189,210,217,539,925,1042,185,201,525,1044,1274,13,14,191,538,924,937,1045]

# 全データ
typical_tokushu = [1,46,47,48,49,50,51,239,240,241,242,243,244,245,246,247,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,647,648,649,650,651,652,653,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,813,814,815,816,817,819,820,821,822,823,824,825,1137,1138,1139,1140,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1368,1369,1371,1372,1373,1374,1375,1376,1377,1378,1379,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1435,1436,1437,1438,1439,1440,1441,1443,1444]
typical_shu = [3,4,5,6,7,8,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,409,410,411,412,413,414,415,416,417,418,419,420,421,422,439,440,441,442,443,444,445,446,447,453,454,455,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,477,478,479,480,481,482,483,485,486,487,488,489,490,491,492,493,494,495,496,498,499,500,501,502,503,504,505,506,507,508,509,510,511,513,514,515,516,517,518,519,520,521,522,523,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,856,857,858,860,861,862,863,865,866,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259]
typical_marushu = [9,10,11,12,13,14,184,185,186,187,188,189,190,191,192,193,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,524,525,527,528,529,530,531,532,533,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,949,950,951,952,953,954,955,956,957,958,959,960,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1260,1261,1262,1263,1264,1265,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303]


with open(hist_data_pass, "rb") as f:
    histograms = pickle.load(f)

def read_hist(num):

    print("\rread No.{}   ".format(num), end="")

    cherry_01 = cherry.cherry(num)

    hist_h = histograms[str(num)]['h']
    hist_l = histograms[str(num)]['l']
    hist_s = histograms[str(num)]['s']

    hist_h_x, hist_h_y, hist_l, hist_s = cherry_01.calc_hist(hist_h, hist_l, hist_s, percent=True, mooving_ave_size_HLS=[0,4,3], H_range=[-9, 15])

    hist_x = np.arange(0, 1, 1/256)

    return hist_h_x, hist_h_y, hist_x, hist_l, hist_s

def grade_value_list(hist_num_list):

    grade_value_list = []

    for num in hist_num_list:

        k_h = 1
        k_l = -1
        k_s = 0
        offset_h = -38
        offset_l = 37
        offset_s = 0

        value_h = 0
        value_l = 0
        value_s = 0

        hist_h_x, hist_h_y, hist_x, hist_l, hist_s = read_hist(num)

        for i in range(len(hist_h_x)-1):
            value_h += float(hist_h_x[i]) * float(hist_h_y[i])
        
        for i in range(len(hist_x)-1):
            value_l += float(hist_x[i]) * float(hist_l[i])
            value_s += float(hist_x[i]) * float(hist_s[i])
        

        grade_value = k_h*value_h+offset_h + k_l*value_l+offset_l + k_s*value_s+offset_s
        grade_value_list.append(grade_value)

    return grade_value_list


grade_value_list_tokushu = grade_value_list(typical_tokushu)
grade_value_list_shu = grade_value_list(typical_shu)
grade_value_list_marushu = grade_value_list(typical_marushu)

grade_value_lists = grade_value_list_tokushu + grade_value_list_shu + grade_value_list_marushu
grade_lists = [3]*len(grade_value_list_tokushu) + [2]*len(grade_value_list_shu) + [1]*len(grade_value_list_marushu)

border_marushu_shu = 9.5
border_shu_tokushu = 24

output_text = "grade_value,grade"
grade_text = ["", "マル秀", "秀", "特秀"]
for i in range(len(grade_value_lists)):

    output_text += str(grade_value_lists[i])
    output_text += ","
    output_text += str(grade_text[grade_lists[i]])
    output_text += "\n"

# csvで保存
with open(grade_value_csv_pass, 'w') as data:
    data.write(output_text)

# 散布図
plt.scatter(grade_value_lists, grade_lists, s=1)
plt.ylim(0, 4)
plt.yticks([1, 2, 3], ["marushu", "shu", "tokushu"])

# 箱ひげ図
fig, ax = plt.subplots()
ax.boxplot([grade_value_list_marushu, grade_value_list_shu, grade_value_list_tokushu], labels=['marushu', 'shu', 'tokushu'], vert=False)

plt.show()